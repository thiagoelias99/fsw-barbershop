// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]

  @@map("users")
}

model Barbershop {
  id       String @id @default(uuid())
  name     String
  address  String
  imageUrl String @map("image_url")

  services Service[]

  @@map("barber_shops")
}

model Service {
  id           String @id @default(uuid())
  barberShopId String @map("barber_shop_id")
  name         String
  // price        Decimal @db.Decimal(10, 2)
  price        Float
  description  String
  imageUrl     String @map("image_url")

  barbershop Barbershop @relation(fields: [barberShopId], references: [id])
  bookings   Booking[]

  @@map("services")
}

model Booking {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  serviceId String   @map("service_id")
  date      DateTime

  user    User    @relation(fields: [userId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])

  @@map("bookings")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
